import { useState } from "react";
import { useAuth } from "@/hooks/use-auth";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogClose } from "@/components/ui/dialog";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { ChevronLeft, ChevronRight, Plus, Search, CalendarIcon, Home, Archive, Tag, Link2, ChevronDown } from "lucide-react";
import { format, addDays, subDays } from "date-fns";
import { requestAiSuggestions } from "@/lib/ai-service";

export default function Dashboard() {
  const { user, logoutMutation } = useAuth();
  const [selectedDate, setSelectedDate] = useState<Date>(new Date());
  const [isNewIssueDialogOpen, setIsNewIssueDialogOpen] = useState(false);
  const [issueTitle, setIssueTitle] = useState("");
  const [issueDescription, setIssueDescription] = useState("");
  const [stepsToReproduce, setStepsToReproduce] = useState("");
  const [solution, setSolution] = useState("");
  const [tagInput, setTagInput] = useState("");
  const [linkTitle, setLinkTitle] = useState("");
  const [linkUrl, setLinkUrl] = useState("");
  const [currentMonth, setCurrentMonth] = useState(format(new Date(), "MMMM yyyy"));

  // Mock data for issues
  const [issues, setIssues] = useState([
    {
      id: 1,
      title: "Reacted",
      description: "Changing the Frontend bug.",
      date: new Date(2025, 3, 8),
      status: "resolved"
    }
  ]);

  const handlePreviousDay = () => {
    setSelectedDate(prev => subDays(prev, 1));
  };

  const handleNextDay = () => {
    setSelectedDate(prev => addDays(prev, 1));
  };

  const handleNewIssue = () => {
    const newIssue = {
      id: issues.length + 1,
      title: issueTitle,
      description: issueDescription,
      date: selectedDate,
      status: "unresolved"
    };
    
    setIssues([...issues, newIssue]);
    setIsNewIssueDialogOpen(false);
    
    // Reset form fields
    setIssueTitle("");
    setIssueDescription("");
    setStepsToReproduce("");
    setSolution("");
    setTagInput("");
    setLinkTitle("");
    setLinkUrl("");
  };

  const getAiSuggestions = async () => {
    try {
      const suggestions = await requestAiSuggestions(issueDescription);
      console.log("AI Suggestions:", suggestions);
      // Show suggestions to the user
      alert(`Suggestions: ${suggestions.join("\n\n")}`);
    } catch (error) {
      console.error("Error getting AI suggestions:", error);
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      {/* Top Navigation */}
      <header className="bg-primary text-white p-4 flex justify-between items-center shadow-md">
        <div className="text-xl font-bold">DevIssueTracker</div>
        <div className="flex space-x-4 items-center">
          <span>Welcome, {user?.username}</span>
          <Button variant="outline" onClick={() => logoutMutation.mutate()}>Logout</Button>
        </div>
      </header>

      <div className="flex flex-1">
        {/* Sidebar */}
        <aside className="w-64 bg-gray-50 dark:bg-gray-800 p-4 border-r border-gray-200 dark:border-gray-700">
          <nav className="space-y-8">
            <div>
              <h3 className="text-sm font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400 mb-2">
                NAVIGATION
              </h3>
              <ul className="space-y-1">
                <li>
                  <Button variant="ghost" className="w-full justify-start">
                    <Home className="mr-2 h-4 w-4" />
                    Dashboard
                  </Button>
                </li>
              </ul>
            </div>
            
            <div>
              <h3 className="text-sm font-medium uppercase tracking-wide text-gray-500 dark:text-gray-400 mb-2 flex items-center justify-between">
                ARCHIVES
                <ChevronDown className="h-4 w-4" />
              </h3>
              <div className="mt-4">
                <div className="flex items-center justify-between mb-2">
                  <ChevronLeft className="h-4 w-4 cursor-pointer" />
                  <span className="font-medium">April 2025</span>
                  <ChevronRight className="h-4 w-4 cursor-pointer" />
                </div>
                <div className="grid grid-cols-7 gap-1 text-xs">
                  <div className="text-center font-medium">Su</div>
                  <div className="text-center font-medium">Mo</div>
                  <div className="text-center font-medium">Tu</div>
                  <div className="text-center font-medium">We</div>
                  <div className="text-center font-medium">Th</div>
                  <div className="text-center font-medium">Fr</div>
                  <div className="text-center font-medium">Sa</div>
                  
                  {/* Example calendar days */}
                  <div className="text-center p-1 text-gray-400">30</div>
                  <div className="text-center p-1 text-gray-400">31</div>
                  <div className="text-center p-1">1</div>
                  <div className="text-center p-1">2</div>
                  <div className="text-center p-1">3</div>
                  <div className="text-center p-1">4</div>
                  <div className="text-center p-1">5</div>
                  
                  <div className="text-center p-1">6</div>
                  <div className="text-center p-1">7</div>
                  <div className="text-center p-1 rounded-full bg-primary text-white">8</div>
                  <div className="text-center p-1">9</div>
                  <div className="text-center p-1">10</div>
                  <div className="text-center p-1">11</div>
                  <div className="text-center p-1">12</div>
                  
                  <div className="text-center p-1">13</div>
                  <div className="text-center p-1">14</div>
                  <div className="text-center p-1">15</div>
                  <div className="text-center p-1">16</div>
                  <div className="text-center p-1">17</div>
                  <div className="text-center p-1">18</div>
                  <div className="text-center p-1">19</div>
                  
                  <div className="text-center p-1">20</div>
                  <div className="text-center p-1">21</div>
                  <div className="text-center p-1">22</div>
                  <div className="text-center p-1">23</div>
                  <div className="text-center p-1">24</div>
                  <div className="text-center p-1">25</div>
                  <div className="text-center p-1">26</div>
                </div>
              </div>
            </div>
          </nav>
        </aside>

        {/* Main Content */}
        <main className="flex-1 p-6 bg-gray-100 dark:bg-gray-900">
          <div className="mb-6">
            <div className="flex items-center justify-between">
              <h1 className="text-2xl font-bold">My Issue Journal</h1>
              <div className="flex space-x-2">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                  <Input 
                    placeholder="Search issues..." 
                    className="pl-10 w-64"
                  />
                </div>
                <Button variant="secondary">Local Search</Button>
                <Dialog open={isNewIssueDialogOpen} onOpenChange={setIsNewIssueDialogOpen}>
                  <DialogTrigger asChild>
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      New Issue
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                      <DialogTitle>Create New Issue</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4 py-4">
                      <div className="space-y-2">
                        <Label htmlFor="title">Title</Label>
                        <Input 
                          id="title" 
                          placeholder="e.g., React useEffect Dependency Bug" 
                          value={issueTitle}
                          onChange={(e) => setIssueTitle(e.target.value)}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="description">Description</Label>
                        <Textarea 
                          id="description" 
                          placeholder="Brief description of the issue"
                          className="min-h-[100px]" 
                          value={issueDescription}
                          onChange={(e) => setIssueDescription(e.target.value)}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="steps">Steps to Reproduce</Label>
                        <Textarea 
                          id="steps" 
                          placeholder="Steps you took that led to the issue"
                          className="min-h-[100px]"
                          value={stepsToReproduce}
                          onChange={(e) => setStepsToReproduce(e.target.value)}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="solution">Solution</Label>
                        <Textarea 
                          id="solution" 
                          placeholder="How you resolved the issue"
                          className="min-h-[100px]"
                          value={solution}
                          onChange={(e) => setSolution(e.target.value)}
                        />
                        <Button 
                          variant="outline" 
                          size="sm" 
                          onClick={getAiSuggestions}
                          className="mt-2"
                        >
                          Get AI Suggestions
                        </Button>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="date">Date</Label>
                        <Input 
                          id="date" 
                          value={format(selectedDate, "MMMM dd, yyyy")}
                          readOnly
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="tags">Tags</Label>
                        <div className="flex space-x-2">
                          <Input 
                            id="tags" 
                            placeholder="Add a tag"
                            value={tagInput}
                            onChange={(e) => setTagInput(e.target.value)}
                          />
                          <Button variant="outline">Add</Button>
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="links">Links</Label>
                        <div className="flex space-x-2 mb-2">
                          <Input 
                            placeholder="Link title"
                            value={linkTitle}
                            onChange={(e) => setLinkTitle(e.target.value)}
                          />
                          <Input 
                            placeholder="URL"
                            value={linkUrl}
                            onChange={(e) => setLinkUrl(e.target.value)}
                          />
                          <Button variant="outline">Add</Button>
                        </div>
                      </div>
                      
                      <div className="flex justify-end space-x-2 pt-4">
                        <DialogClose asChild>
                          <Button variant="outline">Cancel</Button>
                        </DialogClose>
                        <Button onClick={handleNewIssue}>Save Issue</Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </div>
          </div>
          
          <div className="bg-white dark:bg-gray-800 rounded-lg p-6 shadow-sm">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold">{format(selectedDate, "MMMM d, yyyy")}</h2>
              <div className="flex space-x-2 items-center">
                <Button variant="ghost" size="icon" onClick={handlePreviousDay}>
                  <ChevronLeft className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="icon" className="px-2">
                  <CalendarIcon className="h-4 w-4" />
                </Button>
                <Button variant="ghost" size="icon" onClick={handleNextDay}>
                  <ChevronRight className="h-4 w-4" />
                </Button>
              </div>
            </div>
            
            <div className="space-y-4">
              {issues
                .filter(issue => 
                  format(issue.date, "yyyy-MM-dd") === format(selectedDate, "yyyy-MM-dd")
                )
                .map(issue => (
                  <Card key={issue.id} className="overflow-hidden">
                    <CardHeader className="p-4 bg-gray-50 dark:bg-gray-700 flex flex-row items-center justify-between">
                      <CardTitle className="text-lg font-medium">{issue.title}</CardTitle>
                      <Button variant="ghost" size="sm">
                        <ChevronDown className="h-4 w-4" />
                      </Button>
                    </CardHeader>
                    <CardContent className="p-4">
                      <p className="text-sm text-gray-600 dark:text-gray-300">{issue.description}</p>
                    </CardContent>
                  </Card>
                ))}
              
              {issues.filter(issue => 
                format(issue.date, "yyyy-MM-dd") === format(selectedDate, "yyyy-MM-dd")
              ).length === 0 && (
                <div className="text-center py-10 text-gray-500 dark:text-gray-400">
                  <p>No issues recorded for this day.</p>
                  <Button 
                    variant="outline" 
                    className="mt-4"
                    onClick={() => setIsNewIssueDialogOpen(true)}
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add New Issue
                  </Button>
                </div>
              )}
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}